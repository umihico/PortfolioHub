custom:
  profile: portfoliohub # aws account configured in ~/.aws/credentials
  service: portfoliohub # project name
  certificateName: umihi.co # certificated domain in AWS Certificate Manager
  # domainName-prod: portfoliohub.umihi.co # domain name
  # domainName-stg: stg-${self:custom.domainName-prod}
  cloudfrontDomainName-prod: portfoliohub-content.umihi.co
  cloudfrontDomainName-stg: stg-${self:custom.cloudfrontDomainName-prod}
  pythonRequirements:
    dockerizePip: true
  # customDomain:
  #   domainName: ${self:custom.domainName-${opt:stage, self:provider.stage}}
  #   basePath: ""
  #   stage: ${opt:stage, self:provider.stage}
  #   certificateName: ${self:custom.certificateName}
  #   createRoute53Record: true
  scheduleInterval:
    prod: 10
    stg: 1440

service:
  name: ${self:custom.service}

provider:
  name: aws
  region: ap-northeast-1
  runtime: python3.7
  stage: stg
  profile: ${self:custom.profile}
  environment: ${file(./${opt:stage, self:provider.stage}.yml)}
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:getObject"
        - "s3:putObject"
      Resource: "arn:aws:s3:::*/*"
  ecr:
    images:
      latest:
        path: ./

plugins:
  - ./vendor/bref/bref
  # - serverless-domain-manager
  - serverless-python-requirements

functions:
  # laravel:
  #   handler: public/index.php
  #   runtime: provided
  #   timeout: 28
  #   layers:
  #     - arn:aws:lambda:ap-northeast-1:209497400698:layer:php-81-fpm:16
  #   events:
  #     - http: "ANY /"
  #     - http: "ANY /{proxy+}"
  web:
    timeout: 28
    image:
      name: latest
    events:
      - httpApi: "*"
  scraping:
    handler: main.main
    timeout: 120
    memorySize: 512
    runtime: python3.7
    layers:
      - arn:aws:lambda:ap-northeast-1:${env:AWS_ACCOUNT_ID}:layer:pyyaml:1
      - arn:aws:lambda:ap-northeast-1:${env:AWS_ACCOUNT_ID}:layer:requests:2
      - arn:aws:lambda:ap-northeast-1:${env:AWS_ACCOUNT_ID}:layer:selenium:7
      - arn:aws:lambda:ap-northeast-1:${env:AWS_ACCOUNT_ID}:layer:mysql-connector-python:1
    events:
      - schedule: rate(${self:custom.scheduleInterval.${opt:stage, self:provider.stage}} minutes)

package:
  exclude:
    - node_modules/**
    - terraform/**
    - .git/**

resources:
  Resources:
    ResourceBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.cloudfrontDomainName-${opt:stage, self:provider.stage}}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
      DeletionPolicy: Retain

    ResourceCloudfront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - ResourceBucket
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.cloudfrontDomainName-${opt:stage, self:provider.stage}}.s3-website-ap-northeast-1.amazonaws.com
              Id: S3Origin
              CustomOriginConfig:
                HTTPPort: "80"
                HTTPSPort: "443"
                OriginProtocolPolicy: http-only
          Enabled: true
          HttpVersion: "http2"
          DefaultRootObject: index.html
          Aliases:
            - ${self:custom.cloudfrontDomainName-${opt:stage, self:provider.stage}}
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${ssm:usacmarn}
            SslSupportMethod: sni-only

    ResourceDNSName:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: umihi.co.
        RecordSets:
          - Name: ${self:custom.cloudfrontDomainName-${opt:stage, self:provider.stage}}.
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName:
                Fn::GetAtt: [ResourceCloudfront, DomainName]

  Outputs:
    ResourceCloudfrontDistributionId:
      Value:
        Ref: ResourceCloudfront
